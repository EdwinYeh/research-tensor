resultDirectory = '../exp_result/newmodel/Mturk/';
% mkdir(resultDirectory);
expTitle = 'mturk';
% sampleSizeLevel = '1000_100';
% resultFile = fopen(sprintf('%s%s.csv', resultDirectory, expTitle), 'a');
% fprintf(resultFile, 'cpRank,instanceCluster,beta,gama,lambda,objectiveScore,accuracy1,accuracy2,trainingTime\n');
userIdList = [0,1,2];
domainNum = length(userIdList);

betaStart = 0;
betaScale = 1000;
betaMaxOrder = 0;

gamaStart = 0;
gamaScale = 10^3;
gamaMaxOrder = 0;

lambdaStart = 10^-6;
lambdaScale = 10^2;
lambdaMaxOrder = 6;

sigmaList = [1, 10, 100, 1000, 10000];
cpRankList = [10];
perceptionClusterList = [5];

for tuneSigma = 1:length(sigmaList)
    sigma = sigmaList(tuneSigma);
     [X, Y, XW, Su, Du, SeedCluster, PerceptionSeedFilter, SeedSet] = prepareExperimentMturk(userIdList, sigma);
    for tuneCPRank = 1: length(cpRankList)
        cpRank = cpRankList(tuneCPRank);
               for lambdaOrder = 0: lambdaMaxOrder
                    lambda = lambdaStart * lambdaScale ^ lambdaOrder;
                    for gamaOrder = 0: gamaMaxOrder
                        gama = gamaStart * gamaScale ^ gamaOrder;
                        
                        numDomain = length(X);
                        for domId = 1: numDomain
                            % fprintf('validation index domain%d: %d~%d\n', domID, min(validationIndex{domID}), max(validationIndex{domID}));
                            input.S{domId}=PerceptionSeedFilter{domId};
                            input.SeedSet{domId} = SeedSet{domId};
                            input.SeedCluster{domId}=SeedCluster{domId};
                            input.X{domId} = X{domId};
                            Y{domId}(Y{domId}==0) = 10^-6;
                            input.Y{domId} = Y{domId};
                            input.XW{domId} = XW{domId};
                            input.Sxw{domId} = Su{domId};
                            input.Dxw{domId} = Du{domId};
                        end;
                        
                        hyperparam.beta = 0;
                        hyperparam.gamma = gama;
                        hyperparam.lambda = lambda;
                        hyperparam.cpRank = cpRank;
                        hyperparam.perceptionClusterNum = numPerceptionCluster;
                        
                        output=solver_orthognal(input, hyperparam);                                                
                        
                        for domId = 1: domainNum
                            [Recall, precision] = getRecallPrecision(XW{domId}, output.XW{domId}, SeedSet{domId});
                        end
                        disp(var(Recall));
                        disp(precision);
%                         fprintf(resultFile, '%g,%g,%g,%g,%g,%g,%g,%g,%g\n', sigma, cpRank, 0, gama, lambda, output.objective, trainingTime);
%                         fprintf('%g,%g,%g,%g,%g,%g,%g,%g,%g\n', sigma, cpRank, 0, gama, lambda, output.objective, trainingTime);
                    end
                end
            end
        end
    end
end
% fclose(resultFile);